#include <Arduino.h>
#include <Seeed_Arduino_SSCMA.h>
#include <EleTect_inferencing.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/i2s.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
#include <U8x8lib.h>

// Vision related definitions
SSCMA AI;

// Audio related definitions
typedef struct {
    int16_t *buffer;
    uint8_t buf_ready;
    uint32_t buf_count;
    uint32_t n_samples;
} inference_t;

static inference_t inference;
static const uint32_t sample_buffer_size = 2048;
static signed short sampleBuffer[sample_buffer_size];
static bool debug_nn = false;
static bool record_status = true;

// DFPlayer Mini related definitions
SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer;

// LoRa related definitions
U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/*reset=*/U8X8_PIN_NONE);
static char recv_buf[512];
static bool is_exist = false;
const char* node_number = "Node 1";
const char* location = "Kothamangalam";

void playBeeSound();
void sendLoRaMessage(const char* message);

void setup()
{
    Serial.begin(115200);
    while (!Serial) delay(1000);

    Serial.println("Edge Impulse Inferencing Demo");

    // Vision setup
    AI.begin();

    // Audio setup
    ei_printf("Inferencing settings:\n");
    ei_printf("\tInterval: ");
    ei_printf_float((float)EI_CLASSIFIER_INTERVAL_MS);
    ei_printf(" ms.\n");
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
    ei_printf("\nStarting continuous inference in 2 seconds...\n");
    ei_sleep(2000);

    if (microphone_inference_start(EI_CLASSIFIER_RAW_SAMPLE_COUNT) == false) {
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
        return;
    }
    ei_printf("Recording...\n");

    // DFPlayer Mini setup
    mySoftwareSerial.begin(9600);
    Serial.println();
    Serial.println(F("DFRobot DFPlayer Mini"));
    Serial.println(F("Initializing DFPlayer module ... Wait!"));
    if (!myDFPlayer.begin(mySoftwareSerial))
    {
        Serial.println(F("Not initialized:"));
        Serial.println(F("1. Check the DFPlayer Mini connections"));
        Serial.println(F("2. Insert an SD card"));
        while (true);
    }
    Serial.println();
    Serial.println(F("DFPlayer Mini module initialized!"));
    myDFPlayer.setTimeOut(500); // Timeout serial 500ms
    myDFPlayer.volume(5); // Volume 5
    myDFPlayer.EQ(0); // Equalization normal

    // LoRa setup
    u8x8.begin();
    u8x8.setFlipMode(1);
    u8x8.setFont(u8x8_font_chroma48medium8_r);
    Serial1.begin(9600);
    Serial.print("ping pong communication!\r\n");
    u8x8.setCursor(0, 0);
    if (at_send_check_response("+AT: OK", 100, "AT\r\n"))
    {
        is_exist = true;
        at_send_check_response("+MODE: TEST", 1000, "AT+MODE=TEST\r\n");
        at_send_check_response("+TEST: RFCFG", 1000, "AT+TEST=RFCFG,866,SF12,125,12,15,14,ON,OFF,OFF\r\n");
        delay(200);
        u8x8.setCursor(5, 0);
        u8x8.print("slave");
    }
    else
    {
        is_exist = false;
        Serial.print("No E5 module found.\r\n");
        u8x8.setCursor(0, 1);
        u8x8.print("unfound E5 !");
    }
}

void loop()
{
    // Vision inference
    if (!AI.invoke())
    {
        for (int i = 0; i < AI.classes().size(); i++)
        {
            if (strcmp(AI.classes()[i].target, "elephant") == 0)
            {
                Serial.println("elephant detected by vision");
                playBeeSound();
            }
        }
    }

    // Audio inference
    bool m = microphone_inference_record();
    if (!m) {
        ei_printf("ERR: Failed to record audio...\n");
        return;
    }

    signal_t signal;
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
    signal.get_data = &microphone_audio_signal_get_data;
    ei_impulse_result_t result = { 0 };

    EI_IMPULSE_ERROR r = run_classifier(&signal, &result, debug_nn);
    if (r != EI_IMPULSE_OK) {
        ei_printf("ERR: Failed to run classifier (%d)\n", r);
        return;
    }

    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        if (strcmp(result.classification[ix].label, "elephant") == 0 && result.classification[ix].value > 0.5) {
            Serial.println("elephant detected by audio");
            playBeeSound();
        }
    }
}

static void audio_inference_callback(uint32_t n_bytes)
{
    for (int i = 0; i < n_bytes >> 1; i++) {
        inference.buffer[inference.buf_count++] = sampleBuffer[i];
        if (inference.buf_count >= inference.n_samples) {
            inference.buf_count = 0;
            inference.buf_ready = 1;
        }
    }
}

static void capture_samples(void* arg) {
    const int32_t i2s_bytes_to_read = (uint32_t)arg;
    size_t bytes_read = i2s_bytes_to_read;
    while (record_status) {
        i2s_read((i2s_port_t)1, (void*)sampleBuffer, i2s_bytes_to_read, &bytes_read, 100);
        if (bytes_read <= 0) {
            ei_printf("Error in I2S read : %d", bytes_read);
        }
        else {
            if (bytes_read < i2s_bytes_to_read) {
                ei_printf("Partial I2S read");
            }
            for (int x = 0; x < i2s_bytes_to_read / 2; x++) {
                sampleBuffer[x] = (int16_t)(sampleBuffer[x]) * 8;
            }
            if (record_status) {
                audio_inference_callback(i2s_bytes_to_read);
            }
            else {
                break;
            }
        }
    }
    vTaskDelete(NULL);
}

static bool microphone_inference_start(uint32_t n_samples)
{
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
    if (inference.buffer == NULL) {
        return false;
    }
    inference.buf_count = 0;
    inference.n_samples = n_samples;
    inference.buf_ready = 0;

    if (i2s_init(EI_CLASSIFIER_FREQUENCY)) {
        ei_printf("Failed to start I2S!");
    }

    ei_sleep(100);
    record_status = true;
    xTaskCreate(capture_samples, "CaptureSamples", 1024 * 32, (void*)sample_buffer_size, 10, NULL);
    return true;
}

static bool microphone_inference_record(void)
{
    bool ret = true;
    while (inference.buf_ready == 0) {
        delay(10);
    }
    inference.buf_ready = 0;
    return ret;
}

static int microphone_audio_signal_get_data(size_t offset, size_t length, float *out_ptr)
{
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
    return 0;
}

static void microphone_inference_end(void)
{
    i2s_deinit();
    ei_free(inference.buffer);
}

static int i2s_init(uint32_t sampling_rate) {
    i2s_config_t i2s_config = {
        .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_TX),
        .sample_rate = sampling_rate,
        .bits_per_sample = (i2s_bits_per_sample_t)16,
        .channel_format = I2S_CHANNEL_FMT_ONLY_RIGHT,
        .communication_format = I2S_COMM_FORMAT_I2S,
        .intr_alloc_flags = 0,
        .dma_buf_count = 8,
        .dma_buf_len = 512,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };
    i2s_pin_config_t pin_config;
    pin_config.bck_io_num = GPIO_NUM_26;
    pin_config.ws_io_num = GPIO_NUM_32;
    pin_config.data_out_num = I2S_PIN_NO_CHANGE;
    pin_config.data_in_num = GPIO_NUM_33;

    esp_err_t err;
    err = i2s_driver_install((i2s_port_t)1, &i2s_config, 0, NULL);
    if (err != ESP_OK) {
        ei_printf("Failed to install I2S driver: %d", err);
        return false;
    }
    err = i2s_set_pin((i2s_port_t)1, &pin_config);
    if (err != ESP_OK) {
        ei_printf("Failed to set I2S pins: %d", err);
        return false;
    }
    return true;
}

static void i2s_deinit(void) {
    i2s_driver_uninstall((i2s_port_t)1);
}

void playBeeSound()
{
    myDFPlayer.play(1);  // Play sound
    delay(1000);         // Duration of the sound
    myDFPlayer.stop();   // Stop sound

    // Send LoRa message
    char message[128];
    snprintf(message, sizeof(message), "Elephant detected at %s, %s on %s %s", location, node_number, __DATE__, __TIME__);
    sendLoRaMessage(message);
}

void sendLoRaMessage(const char* message)
{
    if (!is_exist)
    {
        Serial.println("No E5 module found.");
        return;
    }

    char cmd[256];
    snprintf(cmd, sizeof(cmd), "AT+TEST=TXLRPKT,\"%s\"\r\n", message);
    int ret = at_send_check_response("TX DONE", 2000, cmd);

    if (ret == 1)
    {
        Serial.println("Message sent successfully!");
    }
    else
    {
        Serial.println("Message sending failed!");
    }
}

static int at_send_check_response(char *p_ack, int timeout_ms, char *p_cmd, ...)
{
    int ch = 0;
    int index = 0;
    int startMillis = 0;
    va_list args;
    memset(recv_buf, 0, sizeof(recv_buf));
    va_start(args, p_cmd);
    Serial1.printf(p_cmd, args);
    Serial.printf(p_cmd, args);
    va_end(args);
    delay(200);
    startMillis = millis();
    if (p_ack == NULL)
    {
        return 0;
    }
    do
    {
        while (Serial1.available() > 0)
        {
            ch = Serial1.read();
            recv_buf[index++] = ch;
            Serial.print((char)ch);
            delay(2);
        }
        if (strstr(recv_buf, p_ack) != NULL)
        {
            return 1;
        }
    } while (millis() - startMillis < timeout_ms);
    return 0;
}
